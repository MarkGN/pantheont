[h:actor=getImpersonated()]
[h:target=getSelected()]
[h:impersonated=ne(actor,"")]
[h:targeted=ne(target,"")]
[h:assert(and(impersonated,targeted),"You must impersonate your own token and select a target to clash with.",0)]
[h:selfClash=eq(actor,target)]
[h:assert(not(selfClash),'You can&#39;t clash with yourself.',0)]
[h:incap=or(getState('incapacitated'),getState('incapacitated',target))]
[h:assert(not(incap),'You can&#39;t clash with someone already incapacitated.',0)]
[h:status=input(
	"advantage|0|net circumstantial bonuses",
  "range|melee only,ranged into melee,ranged only|Combat range|RADIO|ORIENT=H SELECT=0",
  "isCrit|0|crit|CHECK",
  "isVsCrit|0|vs crit|CHECK",
  "isShove|0|shove|CHECK",
  "isVsShove|0|vs shove|CHECK"
)]
[h:"We aren't handling restraints, since those are a bit fiddly"]
[h:abort(status)]
[h:switchToken(actor)]
[h:actorCombat=getCombat(actor)+if(range<=1,json.get(getWeapon(getProperty('weapon')),'bonus'),0)+if(range>=1,json.get(getWeapon(getProperty('rangedWeapon')),'bonus'),0)]
[h:switchToken(target)]
[h:targetCombat=getCombat(target)+if(range<=1,json.get(getWeapon(getProperty('weapon')),'bonus'),0)+if(range>=1,json.get(getWeapon(getProperty('rangedWeapon')),'bonus'),0)]
[h:switchToken(actor)]
[h:checkResult=check(actorCombat,targetCombat)]
[h:checkSuccess=json.get(checkResult,'pass')]
[h:winner=if(checkSuccess,actor,target)]
[h:loser=if(checkSuccess,target,actor)]
[h:crit=or(and(eq(actor,winner),isCrit),and(eq(target,winner),isVsCrit))]
[h:pr=powRoll(getProperty('power',winner),getProperty('endurance',loser))]
[h:damage=json.get(pr,'damage')*(crit+1)]
{getName(actor)} rolled <b>{json.get(checkResult,"roll")}</b> totalling <b>{json.get(checkResult,"total")}</b> vs target {targetCombat+10}<b></b>, damage rolled <b>{json.get(pr,"roll")}</b>;
[h:switchToken(loser)]
<b>{getName(winner)}</b> wins the clash and inflicts <b>{damage}</b> damage!
{applyHit(damage,pr)}